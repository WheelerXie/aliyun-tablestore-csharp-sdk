// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: table_store_filter.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Alicloud.Openservices.Tablestore.Core.Protocol {

  /// <summary>Holder for reflection information generated from table_store_filter.proto</summary>
  public static partial class TableStoreFilterReflection {

    #region Descriptor
    /// <summary>File descriptor for table_store_filter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TableStoreFilterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chh0YWJsZV9zdG9yZV9maWx0ZXIucHJvdG8SMmNvbS5hbGljbG91ZC5vcGVu",
            "c2VydmljZXMudGFibGVzdG9yZS5jb3JlLnByb3RvY29sItQBChdTaW5nbGVD",
            "b2x1bW5WYWx1ZUZpbHRlchJWCgpjb21wYXJhdG9yGAEgAigOMkIuY29tLmFs",
            "aWNsb3VkLm9wZW5zZXJ2aWNlcy50YWJsZXN0b3JlLmNvcmUucHJvdG9jb2wu",
            "Q29tcGFyYXRvclR5cGUSEwoLY29sdW1uX25hbWUYAiACKAkSFAoMY29sdW1u",
            "X3ZhbHVlGAMgAigMEhkKEWZpbHRlcl9pZl9taXNzaW5nGAQgAigIEhsKE2xh",
            "dGVzdF92ZXJzaW9uX29ubHkYBSACKAgixgEKGkNvbXBvc2l0ZUNvbHVtblZh",
            "bHVlRmlsdGVyElcKCmNvbWJpbmF0b3IYASACKA4yQy5jb20uYWxpY2xvdWQu",
            "b3BlbnNlcnZpY2VzLnRhYmxlc3RvcmUuY29yZS5wcm90b2NvbC5Mb2dpY2Fs",
            "T3BlcmF0b3ISTwoLc3ViX2ZpbHRlcnMYAiADKAsyOi5jb20uYWxpY2xvdWQu",
            "b3BlbnNlcnZpY2VzLnRhYmxlc3RvcmUuY29yZS5wcm90b2NvbC5GaWx0ZXIi",
            "NwoWQ29sdW1uUGFnaW5hdGlvbkZpbHRlchIOCgZvZmZzZXQYASACKAUSDQoF",
            "bGltaXQYAiACKAUiZgoGRmlsdGVyEkwKBHR5cGUYASACKA4yPi5jb20uYWxp",
            "Y2xvdWQub3BlbnNlcnZpY2VzLnRhYmxlc3RvcmUuY29yZS5wcm90b2NvbC5G",
            "aWx0ZXJUeXBlEg4KBmZpbHRlchgCIAIoDCphCgpGaWx0ZXJUeXBlEhoKFkZU",
            "X1NJTkdMRV9DT0xVTU5fVkFMVUUQARIdChlGVF9DT01QT1NJVEVfQ09MVU1O",
            "X1ZBTFVFEAISGAoURlRfQ09MVU1OX1BBR0lOQVRJT04QAyqAAQoOQ29tcGFy",
            "YXRvclR5cGUSDAoIQ1RfRVFVQUwQARIQCgxDVF9OT1RfRVFVQUwQAhITCg9D",
            "VF9HUkVBVEVSX1RIQU4QAxIUChBDVF9HUkVBVEVSX0VRVUFMEAQSEAoMQ1Rf",
            "TEVTU19USEFOEAUSEQoNQ1RfTEVTU19FUVVBTBAGKjQKD0xvZ2ljYWxPcGVy",
            "YXRvchIKCgZMT19OT1QQARIKCgZMT19BTkQQAhIJCgVMT19PUhAD"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.FilterType), typeof(global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ComparatorType), typeof(global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.LogicalOperator), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.SingleColumnValueFilter), global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.SingleColumnValueFilter.Parser, new[]{ "Comparator", "ColumnName", "ColumnValue", "FilterIfMissing", "LatestVersionOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.CompositeColumnValueFilter), global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.CompositeColumnValueFilter.Parser, new[]{ "Combinator", "SubFilters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ColumnPaginationFilter), global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ColumnPaginationFilter.Parser, new[]{ "Offset", "Limit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.Filter), global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.Filter.Parser, new[]{ "Type", "Filter_" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FilterType {
    [pbr::OriginalName("FT_SINGLE_COLUMN_VALUE")] FtSingleColumnValue = 1,
    [pbr::OriginalName("FT_COMPOSITE_COLUMN_VALUE")] FtCompositeColumnValue = 2,
    [pbr::OriginalName("FT_COLUMN_PAGINATION")] FtColumnPagination = 3,
  }

  public enum ComparatorType {
    [pbr::OriginalName("CT_EQUAL")] CtEqual = 1,
    [pbr::OriginalName("CT_NOT_EQUAL")] CtNotEqual = 2,
    [pbr::OriginalName("CT_GREATER_THAN")] CtGreaterThan = 3,
    [pbr::OriginalName("CT_GREATER_EQUAL")] CtGreaterEqual = 4,
    [pbr::OriginalName("CT_LESS_THAN")] CtLessThan = 5,
    [pbr::OriginalName("CT_LESS_EQUAL")] CtLessEqual = 6,
  }

  public enum LogicalOperator {
    [pbr::OriginalName("LO_NOT")] LoNot = 1,
    [pbr::OriginalName("LO_AND")] LoAnd = 2,
    [pbr::OriginalName("LO_OR")] LoOr = 3,
  }

  #endregion

  #region Messages
  public sealed partial class SingleColumnValueFilter : pb::IMessage<SingleColumnValueFilter> {
    private static readonly pb::MessageParser<SingleColumnValueFilter> _parser = new pb::MessageParser<SingleColumnValueFilter>(() => new SingleColumnValueFilter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleColumnValueFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.TableStoreFilterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleColumnValueFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleColumnValueFilter(SingleColumnValueFilter other) : this() {
      _hasBits0 = other._hasBits0;
      comparator_ = other.comparator_;
      columnName_ = other.columnName_;
      columnValue_ = other.columnValue_;
      filterIfMissing_ = other.filterIfMissing_;
      latestVersionOnly_ = other.latestVersionOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleColumnValueFilter Clone() {
      return new SingleColumnValueFilter(this);
    }

    /// <summary>Field number for the "comparator" field.</summary>
    public const int ComparatorFieldNumber = 1;
    private readonly static global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ComparatorType ComparatorDefaultValue = global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ComparatorType.CtEqual;

    private global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ComparatorType comparator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ComparatorType Comparator {
      get { if ((_hasBits0 & 1) != 0) { return comparator_; } else { return ComparatorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        comparator_ = value;
      }
    }
    /// <summary>Gets whether the "comparator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComparator {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "comparator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComparator() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 2;
    private readonly static string ColumnNameDefaultValue = "";

    private string columnName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_ ?? ColumnNameDefaultValue; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "column_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColumnName {
      get { return columnName_ != null; }
    }
    /// <summary>Clears the value of the "column_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColumnName() {
      columnName_ = null;
    }

    /// <summary>Field number for the "column_value" field.</summary>
    public const int ColumnValueFieldNumber = 3;
    private readonly static pb::ByteString ColumnValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString columnValue_;
    /// <summary>
    /// Serialized SQLVariant
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ColumnValue {
      get { return columnValue_ ?? ColumnValueDefaultValue; }
      set {
        columnValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "column_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColumnValue {
      get { return columnValue_ != null; }
    }
    /// <summary>Clears the value of the "column_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColumnValue() {
      columnValue_ = null;
    }

    /// <summary>Field number for the "filter_if_missing" field.</summary>
    public const int FilterIfMissingFieldNumber = 4;
    private readonly static bool FilterIfMissingDefaultValue = false;

    private bool filterIfMissing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FilterIfMissing {
      get { if ((_hasBits0 & 2) != 0) { return filterIfMissing_; } else { return FilterIfMissingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        filterIfMissing_ = value;
      }
    }
    /// <summary>Gets whether the "filter_if_missing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFilterIfMissing {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "filter_if_missing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilterIfMissing() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "latest_version_only" field.</summary>
    public const int LatestVersionOnlyFieldNumber = 5;
    private readonly static bool LatestVersionOnlyDefaultValue = false;

    private bool latestVersionOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LatestVersionOnly {
      get { if ((_hasBits0 & 4) != 0) { return latestVersionOnly_; } else { return LatestVersionOnlyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        latestVersionOnly_ = value;
      }
    }
    /// <summary>Gets whether the "latest_version_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLatestVersionOnly {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "latest_version_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLatestVersionOnly() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleColumnValueFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleColumnValueFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Comparator != other.Comparator) return false;
      if (ColumnName != other.ColumnName) return false;
      if (ColumnValue != other.ColumnValue) return false;
      if (FilterIfMissing != other.FilterIfMissing) return false;
      if (LatestVersionOnly != other.LatestVersionOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasComparator) hash ^= Comparator.GetHashCode();
      if (HasColumnName) hash ^= ColumnName.GetHashCode();
      if (HasColumnValue) hash ^= ColumnValue.GetHashCode();
      if (HasFilterIfMissing) hash ^= FilterIfMissing.GetHashCode();
      if (HasLatestVersionOnly) hash ^= LatestVersionOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasComparator) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Comparator);
      }
      if (HasColumnName) {
        output.WriteRawTag(18);
        output.WriteString(ColumnName);
      }
      if (HasColumnValue) {
        output.WriteRawTag(26);
        output.WriteBytes(ColumnValue);
      }
      if (HasFilterIfMissing) {
        output.WriteRawTag(32);
        output.WriteBool(FilterIfMissing);
      }
      if (HasLatestVersionOnly) {
        output.WriteRawTag(40);
        output.WriteBool(LatestVersionOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasComparator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Comparator);
      }
      if (HasColumnName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (HasColumnValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ColumnValue);
      }
      if (HasFilterIfMissing) {
        size += 1 + 1;
      }
      if (HasLatestVersionOnly) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleColumnValueFilter other) {
      if (other == null) {
        return;
      }
      if (other.HasComparator) {
        Comparator = other.Comparator;
      }
      if (other.HasColumnName) {
        ColumnName = other.ColumnName;
      }
      if (other.HasColumnValue) {
        ColumnValue = other.ColumnValue;
      }
      if (other.HasFilterIfMissing) {
        FilterIfMissing = other.FilterIfMissing;
      }
      if (other.HasLatestVersionOnly) {
        LatestVersionOnly = other.LatestVersionOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Comparator = (global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.ComparatorType) input.ReadEnum();
            break;
          }
          case 18: {
            ColumnName = input.ReadString();
            break;
          }
          case 26: {
            ColumnValue = input.ReadBytes();
            break;
          }
          case 32: {
            FilterIfMissing = input.ReadBool();
            break;
          }
          case 40: {
            LatestVersionOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompositeColumnValueFilter : pb::IMessage<CompositeColumnValueFilter> {
    private static readonly pb::MessageParser<CompositeColumnValueFilter> _parser = new pb::MessageParser<CompositeColumnValueFilter>(() => new CompositeColumnValueFilter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompositeColumnValueFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.TableStoreFilterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompositeColumnValueFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompositeColumnValueFilter(CompositeColumnValueFilter other) : this() {
      _hasBits0 = other._hasBits0;
      combinator_ = other.combinator_;
      subFilters_ = other.subFilters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompositeColumnValueFilter Clone() {
      return new CompositeColumnValueFilter(this);
    }

    /// <summary>Field number for the "combinator" field.</summary>
    public const int CombinatorFieldNumber = 1;
    private readonly static global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.LogicalOperator CombinatorDefaultValue = global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.LogicalOperator.LoNot;

    private global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.LogicalOperator combinator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.LogicalOperator Combinator {
      get { if ((_hasBits0 & 1) != 0) { return combinator_; } else { return CombinatorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        combinator_ = value;
      }
    }
    /// <summary>Gets whether the "combinator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCombinator {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "combinator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCombinator() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sub_filters" field.</summary>
    public const int SubFiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.Filter> _repeated_subFilters_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.Filter.Parser);
    private readonly pbc::RepeatedField<global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.Filter> subFilters_ = new pbc::RepeatedField<global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.Filter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.Filter> SubFilters {
      get { return subFilters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompositeColumnValueFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompositeColumnValueFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Combinator != other.Combinator) return false;
      if(!subFilters_.Equals(other.subFilters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCombinator) hash ^= Combinator.GetHashCode();
      hash ^= subFilters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCombinator) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Combinator);
      }
      subFilters_.WriteTo(output, _repeated_subFilters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCombinator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Combinator);
      }
      size += subFilters_.CalculateSize(_repeated_subFilters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompositeColumnValueFilter other) {
      if (other == null) {
        return;
      }
      if (other.HasCombinator) {
        Combinator = other.Combinator;
      }
      subFilters_.Add(other.subFilters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Combinator = (global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.LogicalOperator) input.ReadEnum();
            break;
          }
          case 18: {
            subFilters_.AddEntriesFrom(input, _repeated_subFilters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColumnPaginationFilter : pb::IMessage<ColumnPaginationFilter> {
    private static readonly pb::MessageParser<ColumnPaginationFilter> _parser = new pb::MessageParser<ColumnPaginationFilter>(() => new ColumnPaginationFilter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnPaginationFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.TableStoreFilterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnPaginationFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnPaginationFilter(ColumnPaginationFilter other) : this() {
      _hasBits0 = other._hasBits0;
      offset_ = other.offset_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnPaginationFilter Clone() {
      return new ColumnPaginationFilter(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private readonly static int OffsetDefaultValue = 0;

    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { if ((_hasBits0 & 1) != 0) { return offset_; } else { return OffsetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        offset_ = value;
      }
    }
    /// <summary>Gets whether the "offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffset {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffset() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private readonly static int LimitDefaultValue = 0;

    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { if ((_hasBits0 & 2) != 0) { return limit_; } else { return LimitDefaultValue; } }
      set {
        _hasBits0 |= 2;
        limit_ = value;
      }
    }
    /// <summary>Gets whether the "limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLimit {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimit() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnPaginationFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnPaginationFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOffset) hash ^= Offset.GetHashCode();
      if (HasLimit) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasOffset) {
        output.WriteRawTag(8);
        output.WriteInt32(Offset);
      }
      if (HasLimit) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOffset) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (HasLimit) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnPaginationFilter other) {
      if (other == null) {
        return;
      }
      if (other.HasOffset) {
        Offset = other.Offset;
      }
      if (other.HasLimit) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Offset = input.ReadInt32();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.TableStoreFilterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.FilterType TypeDefaultValue = global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.FilterType.FtSingleColumnValue;

    private global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.FilterType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.FilterType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int Filter_FieldNumber = 2;
    private readonly static pb::ByteString Filter_DefaultValue = pb::ByteString.Empty;

    private pb::ByteString filter_;
    /// <summary>
    /// Serialized string of filter of the type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Filter_ {
      get { return filter_ ?? Filter_DefaultValue; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "filter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFilter_ {
      get { return filter_ != null; }
    }
    /// <summary>Clears the value of the "filter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter_() {
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Filter_ != other.Filter_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasFilter_) hash ^= Filter_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasFilter_) {
        output.WriteRawTag(18);
        output.WriteBytes(Filter_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasFilter_) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Filter_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasFilter_) {
        Filter_ = other.Filter_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Com.Alicloud.Openservices.Tablestore.Core.Protocol.FilterType) input.ReadEnum();
            break;
          }
          case 18: {
            Filter_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
